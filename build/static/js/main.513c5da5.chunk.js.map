{"version":3,"sources":["device/device.js","App.js","serviceWorker.js","index.js"],"names":["iotf","require","Device","org","token","device_config","this","device","IotfManagedDevice","_setup","id","publishHTTPS","JSON","stringify","stateModule","getState","that","connect","on","parent","device_connected","console","log","argument","process","exit","commandName","format","payload","topic","changeState","parse","state","pub","newstate","module","exports","App","props","text","setInterval","Push","test","getMessage","setState","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAAIA,EAAOC,EAAQ,KAEbC,E,WACJ,WAAYC,EAAKC,GAAQ,oBACvB,IAAMC,EAAgB,CACpB,IAAOF,EACP,OAAU,gCACV,KAAQ,UACR,GAAM,IACN,cAAe,QACf,aAAcC,EACd,oBAAoB,GAEtBE,KAAKC,OAAS,IAAIP,EAAKQ,kBAAkBH,GACzCC,KAAKG,S,iDAGFC,GACHJ,KAAKC,OAAOI,aAAaD,EAAI,OAAQE,KAAKC,UAAU,qBAAsB,K,mCAI3E,OAAOC,EAAYC,a,+BAIlB,IAAIC,EAAOV,KAGXA,KAAKC,OAAOU,UAGZX,KAAKC,OAAOW,GAAG,WAAW,SAASC,GACjCH,EAAKI,kBAAmB,EAGxBJ,EAAKT,OAAOW,GAAG,cAAc,WAC3BF,EAAKI,kBAAmB,EACxBC,QAAQC,IAAI,mBAIdN,EAAKT,OAAOW,GAAG,SAAS,SAAUK,GAChCF,QAAQC,IAAIC,GACZC,EAAQC,KAAK,SAKfT,EAAKT,OAAOW,GAAG,WAAW,SAAUQ,EAAYC,EAAOC,EAAQC,GAC1C,mBAAhBH,GACCL,QAAQC,IAAII,EAAc,KAC1BZ,EAAYgB,YAAYlB,KAAKmB,MAAMH,KAGnCP,QAAQC,IAAI,2BAA6BI,Q,oCAMjD,OAAOpB,KAAKc,qB,KAkBZN,EAAe,WACjB,IAAIkB,EAEAC,EAAM,CAEVA,YAAkB,SAAUC,GACxBF,EAAQE,GAGZD,SAAe,WACX,OAAOD,IAGX,OAAOC,EAbU,GAgBnBE,EAAOC,QAAUlC,G,wZCvFbK,G,cAAS,IALGN,EAAS,KAKZ,CAFE,SACM,qBAsCNoC,E,kDAnCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDN,MAAM,CACTO,KAAM,IAHQ,E,iEAOC,IAAD,OACpBC,aAAY,WAEVjC,EAAOkC,KAAK,qBACZ,IAAIC,EAAOnC,EAAOoC,aAClB,EAAKC,SAAS,CACZL,KAAMG,MAGP,O,+BAMD,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAClB,gDACE,yBAAKA,UAAU,UAEf,yBAAKnC,GAAG,QAAQJ,KAAK0B,MAAMO,a,GA7BjBO,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.513c5da5.chunk.js","sourcesContent":["var iotf = require('ibmiotf');\r\n//onst axios = require('axios');\r\nclass Device {\r\n  constructor(org, token) {\r\n    const device_config = {\r\n      \"org\": org,\r\n      \"domain\": \"internetofthings.ibmcloud.com\",\r\n      \"type\": \"IBM-KTH\",\r\n      \"id\": \"0\",\r\n      \"auth-method\": \"token\",\r\n      \"auth-token\": token,\r\n      \"use-client-certs\": false\r\n    };\r\n    this.device = new iotf.IotfManagedDevice(device_config);\r\n    this._setup();\r\n  }\r\n  \r\n  Push(id) {\r\n    this.device.publishHTTPS(id, 'json', JSON.stringify('Any new messages?'), 0);\r\n  }\r\n\r\n getMessage(){\r\n   return stateModule.getState();\r\n }\r\n\r\n  _setup(){\r\n    var that = this;\r\n\r\n    /* Connect it to Watson IoT! */\r\n    this.device.connect();\r\n\r\n    /* When your device has connected, setup listeners and callbacks. */\r\n    this.device.on('connect', function(parent){\r\n      that.device_connected = true;  \r\n\r\n      /* If the device disconnects, we do not need to panic. */\r\n      that.device.on('disconnect', function(){\r\n        that.device_connected = false;\r\n        console.log('Disconnected');\r\n      });\r\n      \r\n      /* Errors are pretty bad, right? */\r\n      that.device.on('error', function (argument) {\r\n        console.log(argument);\r\n        process.exit(1);\r\n      });\r\n    });\r\n\r\n      /* When a command is recieved execute code */\r\n      that.device.on(\"command\", function (commandName,format,payload,topic) {\r\n        if(commandName === \"currentMessage\") {\r\n            console.log(commandName + ':'); \r\n            stateModule.changeState(JSON.parse(payload));\r\n            //console.log(stateModule.getState());\r\n        } else {\r\n            console.log(\"Command not supported.. \" + commandName);\r\n        }\r\n    });\r\n  }\r\n  \r\n  IsConnected() {\r\n    return this.device_connected;\r\n  }\r\n}\r\n/*\r\nconst url = 'https://iot-display.herokuapp.com/display/get/5e8c8382c5c0f600242851f4';\r\n    const getu = async url => {\r\n      try {\r\n        const response = await axios.get(url);\r\n        var myData = response.data.display.message.text;\r\n        console.log(JSON.stringify(myData))\r\n         myData = JSON.stringify(myData);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    getu(url);\r\n*/\r\nvar stateModule = (function () {\r\n  var state; // Private Variable\r\n\r\n  var pub = {};// public object - returned at end of module\r\n\r\n  pub.changeState = function (newstate) {\r\n      state = newstate;\r\n  };\r\n\r\n  pub.getState = function() {\r\n      return state;\r\n  }\r\n\r\n  return pub; // expose externally\r\n}());\r\n\r\nmodule.exports = Device;\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { render } from '@testing-library/react';\nvar IoTDevice = require ('./device/device.js');\n\n/* Edit these lines to reflect your IoT platform config. */\nconst ORG_ID = \"cl3hm5\";\nconst ACCESS_TOKEN = \"secure_token_ibm\";\nvar device = new IoTDevice(ORG_ID, ACCESS_TOKEN);\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      text: \"\"\n    }\n  }\n\ncomponentWillMount(){\nsetInterval(() => {\n  /* This pushes / publishes data to Watson IoT*/\n  device.Push('getCurrentMessage');\n  var test = device.getMessage()\n  this.setState({\n    text: test\n  })\n  //localStorage.setItem(\"mytime\", device.getMessage());\n}, 300000);\n\n}\n  \nrender(){\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <p>Prototype Display</p>\n        <div className=\"screen\">\n        \n        <div id=\"text\">{this.state.text}</div>\n        </div>\n      </header>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}